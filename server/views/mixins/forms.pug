- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {}, labelValue)
  - propertyErrors = _.get(errors, propertyName, [])
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= inputId)= labelValue
    input(
      id= inputId
      name= getInputName(propertyName)
      class= 'form-control' + (propertyErrors.length > 0 ? ' is-invalid' : '')
      value= _.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {}, labelValue)
  - propertyErrors = _.get(errors, propertyName, [])
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= inputId)= labelValue
    textarea(
      rows= 3
      id= inputId
      name= getInputName(propertyName)
      class= 'form-control' + (propertyErrors.length > 0 ? ' is-invalid' : '')
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, options, optionName, isMultiple, errors = {}, labelValue)
  - propertyErrors = _.get(errors, propertyName, [])
  - inputId = getInputId(propertyName)
  - value = _.get(entity, propertyName, isMultiple ? [] : '')
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(for= inputId)= labelValue
    select(
      id= inputId
      name= getInputName(propertyName)
      class= 'form-control' + (propertyErrors.length > 0 ? ' is-invalid' : '')
    )&attributes(attributes)
      if (!isMultiple)
        option(value='' selected= value === '')= ''
      each option in options
        - optionId = _.get(option, 'id', '')
        - isSelected = isMultiple ? value.find(item => item.id === optionId) : Number(value) === Number(optionId)
        option(value= optionId selected= isSelected)= _.get(option, optionName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
